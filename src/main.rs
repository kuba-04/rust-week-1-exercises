use rust_week_1_exercises::{extract_tx_size, extract_tx_version, read_amount, read_compact_size, read_u32, Amount};
use serde::Serialize;
use std::io::Read;

#[derive(Debug, Serialize)]
struct Transaction {
    version: u32,
    inputs: Vec<Input>,
    outputs: Vec<Output>,

}

#[derive(Debug, Serialize)]
struct Input {
    txid: String, // [u8; 32]
    output_index: u32,
    script_sig: String, // Vec<u8>
    sequence: u32,
}

#[derive(Debug, Serialize)]
struct Output {
    amount: f64,
    script_pubkey: String,
}

fn main() {
    let transaction_hex = "01000000122d4a609a62082e76e93071cdbe8f5948178a8c0d8770f76d8eea81e89d58454b000000006b483045022100b80e91170d671999e367b07570c54065f2b8212787a2ff052e414845bea5231b0220169a9dc1bfd02ecd8450adc57590f21b5f8ac253c88123811b59d2258ea076250121028e4a181ee9fed07216ddf34ab7ef0840bbfafb0eeb8a3bb54906ba0b4e83727dffffffff67c06c8818deabf2e93d28da726a85c310a3607653c698d88c4394866031964d000000006a47304402206a86a8952714e6b4a2837a25c4729cefa35d109fe2889c0a81489de2d78559ac02200e34a0cbaa459de57dd9ec862176f3bafc4ee0b974b501e07dee778973ecff680121028c12ba93b2d8bd07513a28444220e7f38c156fd7d75d78be6ec6a6a50d978e91ffffffff70b75fc6f5c9bfeb7a909ed6893a317ebb2f70829e50cdd7cb03c8702761013a000000006a4730440220765f42ad6959fc31cd089bbaa9b8ec5bb1c9f50ef23ac3d981a42e11e242f9140220689a4eeeba07f4e70017ba3c4450de6a65ba959004427468a14e73b359ab3d09012102981d5a50a15b52dec7d5ea1fb736887c111121600723005a098c53d9cab4249effffffffb29b92f00aa5a18b35b4a2728092db0ddf0a3f2ff3748fe1a12beb56bbf291ec000000006a47304402203bd22bcf49ac1c2f7b5f45f3b9d485054483f2043b267c8f00b7f384b34aaf550220544eec2d19ae5f49aeda4a919ddf400f9dab063d1ee094a617b8163533caa75901210225c6e5f0dfc97fefdb2ef371e88fc4668fff1349f8fb53ae60acf82f2d445104ffffffffdb0926042ba80a94ecb1159d379db9bc05430a473cf646477e0c9fae514134f0010000006b4830450221008ccad29c3b8eed49a26fbe6a1014cc6f50a0c84ee6c4f2f95932cb0b40e1871302206f0f8c95e7676f2fb322111f7f1f2b27b03314a01675e1bcb6fe72dbfe34af9e012102af15c31843c2e8a366589fce4d0da8a0f928d41acfb45d1b4fbd50b6fde757afffffffffb5ddf308949222f0407c53022bd4c796de1f14b673a0542ba5c0b81db54ee340000000006a47304402203415b5118252b1a62526f1b5de0de04505503726e7309d525416a2f1a6cbd9bd0220045966792703a2afdafca64fdc35824add240fcab0335ba4d4c31d75ae98ef7c0121033fac8dd53f800e4dbd6c3113999938a54d0c7c145f54101cffc5b12e299750cfffffffffb434b1eabf635171e273074228333107d5487062349258dedc31017c4263a9cb000000006b4830450221008e3ae5e68bcac250ee2f8be420b04598c79039271904067105637cb0152a9e660220276aa8f03d87ea4128eea2d7fe16fba62f88a5323c185db1a35174b553c0a558012102bc2e8aecec9e2035828be0f483633e249c142400f5ada3284125bfc1771450c6ffffffffbf79a71eb25e3a0d457e69c84e8664084e0d932acaeb905aff3bd45f17cbbce5000000006b483045022100b7064e93be508fd2a599755af47ebd1f6bfc16703631e33a082849742e49fc6f02203189d577bed894d151e49f99c45ff8c41cc1191e9aaebd3291bd2becdea5d84f012103ed600999971e1223c67d70254ffa55ac9df3961538874547b7e02762cbfc374bffffffffb337b4bff0e7e2d6726cf34a0af88f0d7dcf118ab55257e95a954556dcf82a5c010000006b483045022100ec23f73687f09256743d4548c112ae9ef8c319dd9da59115ce138ff4bae0cfb50220400fcff834e699af4201529b1311c42b70782946e3ea5bd30c845a4e9f0401e0012103add54efa4a61844c6f89feb32324a46e91561d3d772ed6f2958db40047f3b57fffffffff10fc2f983d220a7b6202ddceee4f46d478d1b7b0d4f66366aa597c29f8db620a010000006b4830450221009f9c6c64962afdb72943ad327b55eda42ac80649774b0979089f9dd236baf65202206f1330e480813f65199c00a4d33a3b2498425c0b2cbd607a4bea050db8e2f99c01210333f241da21d5341317cc3121cd7684f9f4f8edf5e41b5d76e0847cda61b78994ffffffffe7414ace82d4f651727ee9e894275399a749e80f3a6c7a21a795a73692214da9000000006b483045022100a0f32a250d6258b67e20a6de1c017613811772666cb769cd77c592434f2dbbf8022022330e53ea45f06515471bb46cbfe033efdf856620a82ada04d96636bfd0625201210234fd5852e31da173f400e6f82cece91299e032d1a21693424598737ef227a682ffffffff37690f6b94a5e7640822b34282e67c1a2a085023766f1657abe9ff3bb7f49f7b000000006a473044022052dd287369f1dfb0daa929b4da46b1314a29aa7b7d6483555f12b5a42cf82d73022024d04ff7eccd71e473670fb29b495af714d756104f3f05433f634d354128014d01210391889b3c25e2f2c8d40baeca9dcf4220c9f93173eee491779ae26838c4901d99ffffffffdb4ca738ceef5e3583cfddc007da28b76b6b0a837e9f9e579a7242a5d21cae5c010000006b483045022100ae0a26636834af0d56ae10a53dc9c6ae15f6ee4fe8c38bcac4dc35ca797b03f602206273fb3a49decde8868bddb72ae90d5f1a5a0feccc95eeeb97d0ce91932c34a8012102bc9a479f535da935e1fbfdcd10cb83580c24d255c5fe3a0096fa82bd760549f6ffffffff5522dededf7534683e0a3737a082546f8f2f210935d89a03c4d025d24db6f31f000000006a473044022017fc22a0873329dafdf6ce84cba0811886d1b980d37415c19773f2538d28781002202a09c68c5671257a2cb71c268840cdd3ba36348fc669f01f6aa8d3ad169a73d60121031010d7aaaedeeef726617c90a35448a9acbee4dead7390c50af9950a2aa47b22fffffffffe6f500b163e8854f77ac628d9af2b4607d7fee5b8772817f75d5bbd67e3a19d000000006b483045022100a5a6d0384fe81883fe5588fd7fdaf032b13b2aaebdc8368f4736ed7d66bf91df02201df24393bfeec8a59f9797a05858633586d92de4721d78f6e08681166bcb6652012103766ad6f0f2daf2e76e02dcdf9008b462994cbd9d545aea25acb0a97a737a65c8ffffffffa0caba3abc03f42f9da7c5db6c432d050c4ea14871093a6d23a777c46fe86eaf000000006b4830450221009bf69f508e6ce1c2d86e1c621b0cb01ba5cbc0c0b9b49a26432e033788e89d8e022048f999390171e194925b10fc1649d9e0ab4c02941ae00b477efba883dd3f8f1001210271fe1770060d1d80b71bd7df5a117513113b389e43ce1ac48fcaffcd7b55cb7ffffffffff45800d7e811c86c8118552512550c16276f41877a61c74a45bda5c8e188e60e000000006a47304402206f92310709dde23ecf17f00532bd6fe435a7a521f8c9cb144e3bc5efa04606ca02207930f34ca92bf66fcce64eb5b61432aab640d52892f0d9ed26573d2178ea88e80121039ad5eaea7664c3fdad4a8ea25e617726f65a15735d388399c7f607e89f4e432affffffffc191f9ac82317f07f98dad7962458272a7c231d32986fb9fb0bd3583b8d3a09c010000006a47304402206f01871b534c906163df09e9eba4f19ad37d6aca64bc37ed7b8e811c13d354600220536b58060229378419c5abfe6b5d9d1e1b74544a1df9d052d994b064c94091b3012102a3b683413b18211f694fb9e34e557773cdaa3719a968e3aa34f15c319a5dec5cffffffff01aca89c42000000001976a91408b87a2656e65bb5324389050b9912b333909fd188ac00000000";

    let version = extract_tx_version(transaction_hex).unwrap();
    let input_count = extract_tx_size(transaction_hex);

    let transaction_bytes = hex::decode(transaction_hex).unwrap();

    let mut bytes_slice = transaction_bytes.as_slice();
    let mut inputs = vec![];
    for _ in 0..input_count {
        let txid = read_txid(&mut bytes_slice);
        let output_index = read_u32(&mut bytes_slice);
        let script_sig = read_script(&mut bytes_slice);
        let sequence = read_u32(&mut bytes_slice);

        inputs.push(Input {
            txid,
            output_index,
            script_sig,
            sequence,
        });
    }

    let output_count = read_compact_size(&mut bytes_slice);
    let mut outputs = vec![];
    for _ in 0..output_count {
        let amount = read_amount(&mut bytes_slice).to_btc();
        let script_pubkey = read_script(&mut bytes_slice);

        outputs.push(Output {
            amount,
            script_pubkey,
        })
    }

    let tx = Transaction {
        version,
        inputs,
        outputs,
    };

    println!("Version: {version:?}");
    println!("Transaction: {}", serde_json::to_string_pretty(&tx).unwrap());
}

fn read_txid(transaction_bytes: &mut &[u8]) -> String {
    let mut buffer = [0; 32];
    transaction_bytes.read_exact(&mut buffer).unwrap();
    buffer.reverse();
    hex::encode(buffer)
}

fn read_script(transaction_bytes: &mut &[u8]) -> String {
    let script_size = read_compact_size(transaction_bytes) as usize;
    let mut buffer = vec![0_u8; script_size];
    transaction_bytes.read_exact(&mut buffer).unwrap();
    hex::encode(buffer)
}